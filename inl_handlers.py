import asyncio
import logging
import string
import text_message
import key_board
from aiogram import Bot, Dispatcher,F,Router
from aiogram.types import Message, CallbackQuery, callback_query
from aiogram.filters import CommandStart, Command, callback_data
from config import TOKEN
from aiogram.utils import markdown
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton,ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from commands import router as commands_router
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils import markdown


router = Router(name = __name__)
router.include_router(commands_router)

from inl_key_board import (
    ShopCbData,
    ShopActions,
    build_shop_kb,
    build_products_kb,
    ProductCbData,
    ProductActions,
    product_details_kb, correct,
)

@router.callback_query(
    ShopCbData.filter(F.action == ShopActions.products),
)
async def send_products_list(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text="–°–ø–∏—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π FPV –¥—Ä–æ–Ω–æ–≤ –∏ –∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä–æ–≤:",
        reply_markup=build_products_kb(),
    )

@router.callback_query(
    ShopCbData.filter(F.action == ShopActions.wear),
)
async def send_wear_list(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text="–í–∏–¥—ã –±—Ä–æ–Ω–µ–∑–∞—â–∏—Ç—ã,–æ–¥–µ–∂–¥—ã –∏ –±–µ–ª—å—è",
        reply_markup=build_products_kb(),
    )

@router.callback_query(
    ShopCbData.filter(F.action == ShopActions.mylo),
)
async def send_wear_list(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text="–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ª–∏—á–Ω–æ–π –≥–∏–≥–∏–µ–Ω—ã:",
        reply_markup=build_products_kb(),
    )


@router.callback_query(
    ShopCbData.filter(F.action == ShopActions.mass),
)
async def send_wear_list(call: CallbackQuery):
    await call.message.answer(
        text="–≠—Ç–æ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–∑–∏—Ü–∏, –≤—Å–µ –≤–µ—Ä–Ω–æ?\n\n\n",
        reply_markup=correct()
    )

@router.callback_query(
    ShopCbData.filter(F.action == ShopActions.root),
)
async def handle_my_address_button(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        reply_markup=build_shop_kb(),
    )
@router.callback_query(
    ShopCbData.filter(F.action == ShopActions.address),
)
async def handle_my_address_button(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text="–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ—Å–Ω–∞—â–µ–Ω–∏—è:",
        reply_markup=build_products_kb(),
    )

@router.callback_query(
    ProductCbData.filter(F.action == ProductActions.details),
)
async def handle_product_details_button(
    call: CallbackQuery,
    callback_data: ProductCbData,
):
    await call.answer()
    message_text = markdown.text(
        markdown.hbold(f"Product ‚Ññ{callback_data.id}"),
        markdown.text(
            markdown.hbold("Title:"),
            callback_data.title,
        ),
        markdown.text(
            markdown.hbold("Price:"),
            callback_data.price,
        ),
        sep="\n",
    )
    await call.message.edit_text(
        text=message_text,
        reply_markup=product_details_kb(callback_data),
    )


@router.callback_query(
    ProductCbData.filter(F.action == ProductActions.update),
)
async def handle_product_update_button(
    call: CallbackQuery,
    callback_data: ProductCbData,
):
    await call.answer("–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")

@router.callback_query(
    ProductCbData.filter(F.action == ProductActions.delete),
)
async def handle_product_delete_button(
    call: CallbackQuery,
):
    await call.answer(
        text="–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞",
    )

@router.callback_query(F.data == "solder")
async def solder(call: CallbackQuery):
    await call.message.answer(text = "–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∞ –∑–∞—Ç–µ–º –æ—Å—Ç—Ä–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∞–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:",reply_markup=build_shop_kb())
@router.callback_query(F.data == "volonter")
async def solder(call: CallbackQuery):
    await call.message.answer(text = "–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ—â–µ–π, –∞ –∑–∞—Ç–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –ø–æ–ª—å–∑—É –Ω–∞—à–∏—Ö –±–æ–π—Ü–æ–≤ –Ω–∞ –ø–µ—Ä–µ–¥–æ–≤–æ–π:",reply_markup=build_shop_kb())
    # num = 0
@router.callback_query(F.data == "yes")
async def solder(call: CallbackQuery):
    await call.message.answer(text = "–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æüëå! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Å–ª—É—á–∞–µ –º–µ—Ç—á–∞")
@router.callback_query(F.data == "no")
async def solder(call: CallbackQuery):
    await call.message.answer(text = "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å",reply_markup=build_shop_kb())
# @router.callback_query(F.data == text_message.DRONES_DATA)
# async def drones_query(callback_query:CallbackQuery):
#     bot_me = await callback_query.bot.me()
#     await callback_query.message.answer(text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {text_message.DRONES}")
#
# @router.callback_query(F.data == text_message.MEDICAL_DATA)
# async def drones_query(callback_query:CallbackQuery):
#     bot_me = await callback_query.bot.me()
#     await callback_query.message.answer(text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{text_message.MEDICAL}'")
# @router.callback_query(F.data == text_message.PROTECTION_DATA)
# async def drones_query(callback_query:CallbackQuery):
#     bot_me = await callback_query.bot.me()
#     await callback_query.message.answer(text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{text_message.PROTECTION}'")
#
# @router.callback_query(F.data == text_message.FOOD_DATA)
# async def drones_query(callback_query: CallbackQuery):
#     await callback_query.message.answer(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{text_message.FOOD}'")
# @router.callback_query(DIce_Model.filter(F.act == CategoryActions.product))
# async def handle_target_food(callback_query:CallbackQuery):
#     await callback_query.answer(text=f"Product in progress")
# @router.callback_query(DIce_Model.filter(F.act == CategoryActions.root))
# async def handle_target_food(callback_query:CallbackQuery):
#     await callback_query.message.answer(text=f"–ò —Å–Ω–æ–≤–∞ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ",reply_marcup = key_board.start_keyboard())
#
# @router.callback_query(DIce_Model.filter(F.act == CategoryActions.address))
# async def handle_target_food(callback_query:CallbackQuery):
#     await callback_query.answer(text=f"Your address in progress")
#
# @router.callback_query(FixCbData.filter())
# async def handle_food(callback_query:CallbackQuery,callback_data:FixCbData):
#     await callback_query.answer(text=f"–¢–≤–æ–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω—è–µ—Ç—Å—è {callback_data.num}\n and {callback_query.data!r} ")